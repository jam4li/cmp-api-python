# Note: Before running, you should ensure the Docker network my_network and volume backup_db_data already exist.
# If they don't, you can create them with
# docker network create my_network and docker volume create backup_db_data.
# Note: To run backup_db directly from the Docker CLI run the below steps
# docker container run --name django_backup_db -p 3307:3306 -e MYSQL_DATABASE=${DATABASE_NAME} -e MYSQL_PASSWORD=${DATABASE_PASSWORD}
# -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} -v backup_db_data:/var/lib/mysql --network my_network mysql:latest

version: "3.9"

services:
  web:
    container_name: django_api
    build: .
    command: daphne config.asgi:application --bind 0.0.0.0 --port 8000
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.staging
    volumes:
      - ./:/cmp_api_python/
      - static_volume:/cmp_api_python/static
      - media_volume:/cmp_api_python/media
    ports:
      - 8000:8000
    env_file:
      - ./.env
    depends_on:
      - db
    networks:
      - my_network

  db:
    container_name: django_db
    image: mysql:latest
    command: --max_connections=1000
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql:rw
    networks:
      - my_network

  redis:
    container_name: django_redis
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - my_network

  celery_worker:
    container_name: django_celery_worker
    build: .
    command: celery -A config worker --loglevel=info
    volumes:
      - ./:/cmp_api_python/
    depends_on:
      - redis
    env_file:
      - ./.env
    networks:
      - my_network

  celery_beat:
    container_name: django_celery_beat
    build: .
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./:/cmp_api_python/
    depends_on:
      - redis
    env_file:
      - ./.env
    networks:
      - my_network

volumes:
  db_data:
  static_volume:
    external: true
  media_volume:
    external: true

networks:
  my_network:
    external: true
